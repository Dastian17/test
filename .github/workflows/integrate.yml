name: javascript-CI

on:
  push:
    branches: [main]  # Ejecutar en cada push a la rama 'main'
  pull_request:
    branches: [main, master]  # Tambi√©n ejecutar en PRs hacia 'main' y 'master'

permissions: write-all

jobs:
  generate-commit-matrix:
    runs-on: ubuntu-latest
    outputs:
      commits: ${{ steps.get_commits.outputs.commit_list }}
    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

      # Extraer commits del evento push y convertirlos en formato de matriz
      - name: Extract commits
        id: get_commits
        run: |
          echo "Fetching commits from push event..."
          commits=$(echo "${{ toJson(github.event.commits) }}" | jq -r '[.[] | {message: .message, author: .author.name, timestamp: .timestamp}]')
          echo "::set-output name=commit_list::$commits"

  ci_to_main:
    needs: generate-commit-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        commit: ${{ fromJson(needs.generate-commit-matrix.outputs.commits) }}

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4
      
      # Set up Node.js version 20
      - name: Set up node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      # Install dependencies using npm ci
      - name: Install dependencies
        run: npm ci

      # Ejecutar pruebas unitarias para cada commit
      - name: Run Unit Tests for each commit
        run: |
          echo "Processing commit from matrix: Message='${{ matrix.commit.message }}'"
          npm run test-once

      # Generate Jest coverage report
      - name: Jest coverage report
        uses: ArtiomTr/jest-coverage-report-action@v2.2.6
        id: coverage
        with:
          output: report-markdown, comment

      # Add Jest coverage report as a sticky comment on commit or pull request
      - uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'push'
        with:
          message: ${{ steps.coverage.outputs.report }}
