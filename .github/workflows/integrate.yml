name: CI Workflow for Each Commit with Jest Coverage

on:
  push:
    branches:
      - "**"

permissions:
  contents: write # Permission to write to the repo (necessary for commenting)

jobs:
  run-for-each-commit:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all commits are available

      # Get commits from the push event and store them as output
      - name: Get commits from push
        id: commits
        run: |
          commit_list=$(jq -r '.[] | .id' <<< '${{ toJson(github.event.commits) }}')
          echo "::set-output name=commit_list::${commit_list}"

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run Jest coverage for each commit
      - name: Run Jest coverage for each commit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Configure token for GitHub CLI
        run: |
          commit_list="${{ steps.commits.outputs.commit_list }}"
           for commit in $(git rev-list ${{ github.event.before}}..${{ github.sha}}); do
              git checkout $commit
              echo "run test"
               # Install dependencies
              npm install
            
              if [ -f coverage/coverage-summary.json ]; then
                # Extract coverage data
                STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
                BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
                FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
                LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
                COVERED_STATEMENTS=$(jq '.total.statements.covered' coverage/coverage-summary.json)
                TOTAL_STATEMENTS=$(jq '.total.statements.total' coverage/coverage-summary.json)
                COVERED_BRANCHES=$(jq '.total.branches.covered' coverage/coverage-summary.json)
                TOTAL_BRANCHES=$(jq '.total.branches.total' coverage/coverage-summary.json)
                COVERED_FUNCTIONS=$(jq '.total.functions.covered' coverage/coverage-summary.json)
                TOTAL_FUNCTIONS=$(jq '.total.functions.total' coverage/coverage-summary.json)
                COVERED_LINES=$(jq '.total.lines.covered' coverage/coverage-summary.json)
                TOTAL_LINES=$(jq '.total.lines.total' coverage/coverage-summary.json)

                # Format the coverage report as a markdown table
                BODY="Coverage report for commit $commit\n\n"
                BODY+="| St.‚ùî | Category   | Percentage | Covered / Total |\n"
                BODY+="| :--: | :--------- | ---------: | --------------: |\n"
                BODY+="| üü¢  | Statements  | ${STATEMENTS}% | ${COVERED_STATEMENTS}/${TOTAL_STATEMENTS} |\n"
                BODY+="| üü¢  | Branches    | ${BRANCHES}%   | ${COVERED_BRANCHES}/${TOTAL_BRANCHES} |\n"
                BODY+="| üü¢  | Functions   | ${FUNCTIONS}%  | ${COVERED_FUNCTIONS}/${TOTAL_FUNCTIONS} |\n"
                BODY+="| üü¢  | Lines       | ${LINES}%      | ${COVERED_LINES}/${TOTAL_LINES} |\n"

                # Comment on the commit
                gh api repos/${{ github.repository }}/commits/$commit/comments -f body="$BODY"
              else
                echo "Error: No coverage report found."
              fi
          done
        shell: bash
     #####
      #- name: Run E2E Tests
      #  uses: cypress-io/github-action@v4
      #  with:
      #    start: npm start
      #    wait-on: "http://localhost:1234"
      #####
      #- name: Build for deploy
      #  run: npm run build
      #- name: Deploy to GitHub Pages
      #  if: success()
      #  uses: crazy-max/ghaction-github-pages@v2
      #  with:
      #    target_branch: gh-pages
      #    build_dir: dist
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}