name: CI Workflow for Each Commit with Jest Coverage

on:
  push:
    branches:
      - "**"

permissions:
  contents: write # Permission to write to the repo (necessary for commenting)

jobs:
  run-for-each-commit:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure all commits are available

      # Get commits from the push event and store them as output
      - name: Get commits from push
        id: commits
        run: |
          commit_list=$(jq -r '.[] | .id' <<< '${{ toJson(github.event.commits) }}')
          echo "::set-output name=commit_list::${commit_list}"

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run Jest coverage for each commit
      - name: Run Jest coverage for each commit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Configure token for GitHub CLI
        run: |
          commit_list="${{ steps.commits.outputs.commit_list }}"
           for commit in $(git rev-list ${{ github.event.before}}..${{ github.sha}}); do
              git checkout $commit
              echo "run test"
               # Install dependencies
              npm install
            
              const fs = require('fs');
              const { execSync } = require('child_process');

              // Ejecutar Jest y capturar la salida
              const jestOutput = execSync('npm run test-once -- --coverage', { encoding: 'utf-8' });

              // Extraer la informaci√≥n de cobertura
              const coverageRegex = /All files\s+(\d+(?:\.\d+)?)\s+(\d+(?:\.\d+)?)\s+(\d+(?:\.\d+)?)\s+(\d+(?:\.\d+)?)/;
              const match = jestOutput.match(coverageRegex);

              if (match) {
                const [, statements, branches, functions, lines] = match;

                // Funci√≥n para determinar el emoji basado en el porcentaje
                const getEmoji = (percentage) => percentage === '100' ? 'üü¢' : '‚ùî';

                // Crear el reporte formateado
                const formattedReport = `
              ### Coverage report

              St.  | Category    | Percentage
              -----|-------------|------------
              ${getEmoji(statements)} | Statements  | ${statements}%
              ${getEmoji(branches)}   | Branches    | ${branches}%
              ${getEmoji(functions)}  | Functions   | ${functions}%
              ${getEmoji(lines)}      | Lines       | ${lines}%
                `;

                // Obtener el hash del commit actual
                const commitHash = execSync('git rev-parse HEAD', { encoding: 'utf-8' }).trim();

                // Crear el comentario completo
                const fullComment = `Jest Coverage Report for commit ${commitHash}:\n${formattedReport}`;

                // Guardar el comentario en un archivo temporal
                fs.writeFileSync('coverage-comment.txt', fullComment);

                console.log('Reporte de cobertura formateado y guardado en coverage-comment.txt');
              } else {
                console.error('No se pudo extraer la informaci√≥n de cobertura del output de Jest.');
              }
          done
        shell: bash
     #####
      #- name: Run E2E Tests
      #  uses: cypress-io/github-action@v4
      #  with:
      #    start: npm start
      #    wait-on: "http://localhost:1234"
      #####
      #- name: Build for deploy
      #  run: npm run build
      #- name: Deploy to GitHub Pages
      #  if: success()
      #  uses: crazy-max/ghaction-github-pages@v2
      #  with:
      #    target_branch: gh-pages
      #    build_dir: dist
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}